use approx::assert_relative_eq;
use ndarray::{arr1, arr2, s, Array1};

use gaussian_filter::gaussian_filter;

#[test]
fn test_gaussian_filter_1d() {
    let mut a: Array1<f32> = (0..7).map(|v| v as f32).collect();
    assert_relative_eq!(
        gaussian_filter(a.clone(), 1.0, 4.0),
        arr1(&[0.42704095, 1.06795587, 2.00483335, 3.0, 3.99516665, 4.93204413, 5.57295905]),
        epsilon = 1e-5
    );

    a[0] = 0.7;
    assert_relative_eq!(
        gaussian_filter(a, 2.0, 3.0),
        arr1(&[1.41930981, 1.737984, 2.32001418, 3.06429384, 3.83519742, 4.47783569, 4.84536505]),
        epsilon = 1e-5
    );
}

#[test]
fn test_gaussian_filter_2d() {
    let a: Array1<f32> = (0..70).step_by(2).map(|v| v as f32).collect();
    let mut a = a.into_shape((5, 7)).unwrap();
    a[(0, 0)] = 17.0;
    assert_relative_eq!(
        gaussian_filter(a, 1.0, 4.0),
        arr2(&[
            [13.815777, 11.339161, 10.624790, 12.028319, 13.970364, 15.842661, 17.124491],
            [19.028266, 18.574515, 19.253122, 20.972480, 22.940515, 24.813596, 26.095426],
            [29.490632, 30.429859, 32.067691, 34.004534, 35.990466, 37.864088, 39.145918],
            [41.954319, 43.209374, 45.064692, 47.050845, 49.040835, 50.914579, 52.196409],
            [50.876966, 52.158011, 54.031226, 56.021437, 58.011760, 59.885514, 61.167344],
        ]),
        epsilon = 1e-4
    );

    let a: Array1<f32> = (0..84).step_by(2).map(|v| v as f32).collect();
    let mut a = a.into_shape((6, 7)).unwrap();
    a[(0, 0)] = 8.5;
    assert_relative_eq!(
        gaussian_filter(a, 1.0, 2.0),
        arr2(&[
            [10.078889, 9.458512, 10.006921, 11.707343, 13.707343, 15.598366, 16.892008],
            [17.220368, 17.630152, 18.901181, 20.762841, 22.762841, 24.653864, 25.947506],
            [29.114912, 30.247316, 32.025236, 34.000000, 36.000000, 37.891022, 39.184665],
            [42.815334, 44.108977, 46.000000, 48.000000, 50.000000, 51.891022, 53.184665],
            [56.052493, 57.346135, 59.237158, 61.237158, 63.237158, 65.128181, 66.421823],
            [65.107991, 66.401633, 68.292656, 70.292656, 72.292656, 74.183679, 75.477321],
        ]),
        epsilon = 1e-4
    );

    let a: Array1<f32> = (0..112).step_by(2).map(|v| v as f32).collect();
    let mut a = a.into_shape((8, 7)).unwrap();
    a[(0, 0)] = 18.2;
    assert_relative_eq!(
        gaussian_filter(a, 1.5, 3.5),
        arr2(&[
            [16.712738, 16.305071, 16.362633, 17.349640, 18.918925, 20.453389, 21.402458],
            [22.053278, 22.092231, 22.654442, 23.931577, 25.600571, 27.156699, 28.108700],
            [31.729499, 32.273101, 33.405531, 35.010491, 36.792147, 38.372755, 39.328068],
            [44.082359, 44.916089, 46.376344, 48.169773, 50.016201, 51.610882, 52.568100],
            [57.507111, 58.440549, 60.013467, 61.871668, 63.740356, 65.339873, 66.297746],
            [70.680896, 71.635999, 73.233396, 75.105670, 76.979195, 78.579763, 79.537778],
            [81.891299, 82.849334, 84.450044, 86.324223, 88.198402, 89.799112, 90.757147],
            [88.597541, 89.555576, 91.156286, 93.030465, 94.904644, 96.505354, 97.463388],
        ]),
        epsilon = 1e-4
    );
}

#[test]
fn test_gaussian_filter_3d() {
    let a: Array1<f32> = (0..720).map(|v| v as f32 / 50.0).collect();
    let mut a = a.into_shape((10, 9, 8)).unwrap();
    a[(0, 0, 0)] = 0.2;
    a[(3, 3, 3)] = 1.0;

    let g = gaussian_filter(a, 1.8, 4.0);
    assert_relative_eq!(
        g.slice(s![0, .., ..]),
        arr2(&[
            [1.647472, 1.651181, 1.659609, 1.673325, 1.691082, 1.709747, 1.725337, 1.734229],
            [1.708805, 1.712651, 1.721257, 1.735376, 1.754014, 1.773838, 1.790377, 1.799745],
            [1.818189, 1.822212, 1.831044, 1.845692, 1.865495, 1.886855, 1.904654, 1.914653],
            [1.957290, 1.961716, 1.971077, 1.986287, 2.006792, 2.028921, 2.047320, 2.057615],
            [2.110379, 2.115686, 2.126213, 2.142124, 2.162550, 2.184116, 2.201956, 2.211958],
            [2.265391, 2.271859, 2.283923, 2.300605, 2.320466, 2.340645, 2.357214, 2.366559],
            [2.409767, 2.417196, 2.430533, 2.447822, 2.467118, 2.486012, 2.501415, 2.510160],
            [2.525863, 2.533820, 2.547860, 2.565478, 2.584446, 2.602611, 2.617354, 2.625759],
            [2.591995, 2.600145, 2.614439, 2.632176, 2.651024, 2.668921, 2.683421, 2.691702],
        ]),
        epsilon = 1e-4
    );
    assert_relative_eq!(
        g.slice(s![9, .., ..]),
        arr2(&[
            [11.68823, 11.69645, 11.71083, 11.72861, 11.74741, 11.76522, 11.77964, 11.78788],
            [11.75407, 11.76228, 11.77665, 11.79442, 11.81323, 11.83105, 11.84548, 11.85373],
            [11.86941, 11.87760, 11.89196, 11.90972, 11.92854, 11.94638, 11.96082, 11.96907],
            [12.01257, 12.02076, 12.03511, 12.05287, 12.07169, 12.08953, 12.10399, 12.11224],
            [12.16671, 12.17491, 12.18926, 12.20702, 12.22584, 12.24368, 12.25812, 12.26638],
            [12.32086, 12.32907, 12.34344, 12.36121, 12.38002, 12.39784, 12.41227, 12.42051],
            [12.46405, 12.47227, 12.48665, 12.50443, 12.52324, 12.54104, 12.55545, 12.56369],
            [12.57941, 12.58764, 12.60204, 12.61982, 12.63862, 12.65641, 12.67081, 12.67905],
            [12.64527, 12.65350, 12.66790, 12.68568, 12.70448, 12.72227, 12.73667, 12.74490],
        ]),
        epsilon = 1e-4
    );
}

#[should_panic]
#[test]
fn test_gaussian_filter_panic() {
    let a: Array1<f32> = (0..7).map(|v| v as f32).collect();
    let _ = gaussian_filter(a, 2.0, 4.0);
}
